datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String   @id @default(cuid())
  email        String
  firstName    String
  lastName     String
  role         UserRole @default(user)
  profileImage String

  orders Order[]

  createdAt DateTime @default(now())
}

model Product {
  id            String        @id @default(cuid())
  name          String
  slug          String        @unique
  harmonization String        @default("")
  coverUrl      String
  images        String[]
  isDestack     Boolean       @default(false)
  status        ProductStatus @default(draft)
  isFeatured    Boolean       @default(false)

  createdAt DateTime @default(now())

  ingredients Ingredient[] @relation("IngredientToProduct")
  category    Category?    @relation(fields: [categoryId], references: [id])
  categoryId  String?

  productDetails ProductDetail[]
}

model ProductDetail {
  id              String    @id @default(uuid())
  weight          Int
  netWeight       Int?
  validate        DateTime?
  discount        Int       @default(0)
  price           Int
  currency        String    @default("EUR")
  quantityInStock Int
  onSales         Boolean   @default(false)

  createdAt DateTime @default(now())

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: NoAction)

  @@index([productId], map: "ProductDetail_productId_index")
}

model Ingredient {
  id                 String    @id @default(uuid())
  name               String
  color              String?
  ingredientImageUrl String?
  createdAt          DateTime  @default(now())
  products           Product[] @relation("IngredientToProduct")
}

model Category {
  id               String    @id @default(uuid())
  title            String
  href             String?
  description      String?
  categoryImageUrl String?
  createdAt        DateTime  @default(now())
  products         Product[]
}

model Testimonial {
  id          String   @id @default(uuid())
  name        String
  testimonial String
  email       String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  imageUrl    String?
}

model Banner {
  id          String @id @default(cuid())
  title       String
  imageString String

  createdAt DateTime @default(now())
}

model Order {
  id     String @id @default(cuid())
  status String @default("pending")
  amount Int

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
}

enum ProductStatus {
  draft
  published
  archived
}

// enum Category {
//   jam
//   utensils
//   packages
// }

enum UserRole {
  admin
  manager
  user
}
